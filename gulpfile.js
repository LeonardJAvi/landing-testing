//Environment - Gulpfile
const gulp = require('gulp');
const sass = require('gulp-sass');
const haml = require('gulp-ruby-haml');
const browserSync = require('browser-sync').create();
const gulpIgnore = require("gulp-ignore");
const htmlbeautify = require("gulp-html-beautify");

// Project - config paths
const dir_src = 'src';
const dir_dist = 'docs';

// set of route objects - start
const src_paths = {
    haml: [`${dir_src}/*.haml`, `${dir_src}/partials/*.haml`],  //for development
    //haml:  'src/*.haml',     //for production
     css:  `${dir_src}/css/**/*`,
      js:  `${dir_src}/js/**/*`,
    sass:  `${dir_src}/scss/**/*.scss`, // for customs styles
   fonts:  `${dir_src}/fonts/**/*`,
  images:  `${dir_src}/img/**/*`,
 scripts:  `${dir_src}/scripts/**/*`
}

// set of paths - distribution
const dist_paths = { 
   css: `${dir_dist}/assets/css`,
    js: `${dir_dist}/assets/js`,
   img: `${dir_dist}/assets/img`,
 fonts: `${dir_dist}/assets/fonts`
}

// excludes the partials generated by haml
const partial_condition = "_*.html";

// set of tasks 
gulp.task('browser', function () {
    browserSync.init({
      server: {
        baseDir: dir_dist
      }
    })
  });


gulp.task("haml", function() {
  return gulp
    .src(src_paths.haml)
    .pipe(
      haml({
        doubleQuote: true
      })
    )
    .pipe(
      htmlbeautify({
        indent_size: 2
      })
    )
    .pipe(gulpIgnore.exclude(partial_condition))
    .pipe(gulp.dest(dir_dist))
    .pipe(
      browserSync.reload({
        stream: true
      })
    );
});

gulp.task('css', function() {
  return gulp.src(src_paths.css)
  .pipe(gulp.dest(dist_paths.css))
});

gulp.task('js', function() {
  return gulp.src(src_paths.js)
  .pipe(gulp.dest(dist_paths.js))
});

gulp.task('sass', function () {
  return gulp.src(src_paths.sass)
    .pipe(sass().on('error', sass.logError))
    .pipe(gulp.dest(dist_paths.css));
});

gulp.task('fonts', function() {
  return gulp.src(src_paths.fonts)
  .pipe(gulp.dest(dist_paths.fonts))
});

gulp.task('images', function() {
  return gulp.src(src_paths.images)
  .pipe(gulp.dest(dist_paths.img))
});

gulp.task('scripts', function() {
  return gulp.src(src_paths.scripts)
  .pipe(gulp.dest(dist_paths.js))
});

gulp.task('watch', ['haml','css','js','sass','fonts','images','scripts'], function() {
    gulp.watch(src_paths.haml, ['haml']).on('change', browserSync.reload);
    gulp.watch(src_paths.sass, ['sass']).on('change', browserSync.reload);
    gulp.watch(src_paths.scripts, ['scripts']).on('change', browserSync.reload);
    gulp.watch(src_paths.images, ['images']).on('change', browserSync.reload);
});

gulp.task('default', ['watch','browser']);